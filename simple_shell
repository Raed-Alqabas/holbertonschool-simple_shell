#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

extern char **environ;

int main(void) {
    char *line = NULL;
    size_t len = 0;
    ssize_t read;

    while (1) {
        // 1. Display the prompt
        printf("$ ");
        fflush(stdout);

        // 2. Read a line from the user
        read = getline(&line, &len, stdin);
        if (read == -1) {  // Handle EOF (Ctrl+D) or error
            printf("\n");
            break;
        }

        // 3. Remove the newline character at the end of the line
        if (line[read - 1] == '\n') {
            line[read - 1] = '\0';
        }

        // 4. Skip empty input lines
        if (line[0] == '\0') {
            continue;
        }

        // 5. Create a child process to execute the command
        pid_t pid = fork();
        if (pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (pid == 0) {  // Child process
            // Execute the command with no arguments
            char *args[] = {line, NULL};
            execve(line, args, environ);

            // If execve returns, there was an error (command not found)
            perror("execve");
            exit(EXIT_FAILURE);
        } else {  // Parent process
            // Wait for the child process to finish
            wait(NULL);
        }
    }

    free(line);
    return 0;
}
